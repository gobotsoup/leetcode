public class Solution {
    public int LengthOfLongestSubstring(string s) {
        
        int subLen = s.Length;
        while(subLen > 0)
        {
            for (int i=0; i < s.Length; i++)
            {
                if (subLen > s.Length - i) break;
                string sub = s.Substring(i, subLen);
                bool hasRepeats = HasRepeats(sub);
                //Console.WriteLine("{0} has repeats: {1}", sub, hasRepeats);
                if (!hasRepeats) return subLen;
            }
            subLen--;
        }
        
        return 0;
    }
    
    private bool HasRepeats(string sub)
    {
        int index = 0;
        //StringBuilder sb = new StringBuilder(sub);
        foreach(char c in sub)
        {
            //sb[index] = ' ';
            //Console.WriteLine(sb.ToString());
            //if (sb.ToString().IndexOf(c) != -1) return true;
            for (int i = index+1; i<sub.Length; i++)
            {
                if (sub[i] == c) return true;
            }
            index++;
        }
        
        return false;
    }
}


public class Solution {
    public int LengthOfLongestSubstring(string s) {
        
        int subLen = s.Length;
        while(subLen > 0)
        {
            for (int i=0; i < s.Length; i++)
            {
                if (subLen > s.Length - i) break;
                string sub = s.Substring(i, subLen);
                bool hasRepeats = HasRepeats(sub);
                //Console.WriteLine("{0} has repeats: {1}", sub, hasRepeats);
                if (!hasRepeats) return subLen;
            }
            subLen--;
        }
        
        return 0;
    }
    
    private bool HasRepeats(string sub)
    {
        int index = 0;
        var dict = new Dictionary<char, int>();
        foreach(char c in sub)
        {
            int ival;
            dict.TryGetValue(c, out ival);
            if (ival == 0)
            {
                dict[c] = 1;
            }
            else return true;
        }
        
        return false;
    }
}